name: "Build"

on:
  push:
    branches:
      - main

env:
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  VAULT_ADDR: https://vault.online.ntnu.no:8200
  AWS_DEFAULT_REGION: eu-north-1

jobs:
  build-base:
    name: "Packer build base"
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.1.2
        with:
          url: https://vault.online.ntnu.no:8200
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              /aws/creds/packer-builder access_key | AWS_ACCESS_KEY_ID ;
              /aws/creds/packer-builder secret_key | AWS_SECRET_ACCESS_KEY ;

      - name: Wait for IAM eventual consistency
        run: sleep 10

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION}}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build AWS AMI
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: -var=aws_ami_tags={ci-run-id="${{ github.run_id }}"} -var 'skip_create_image=false'
          target: images/base

      - name: Find AMI ID
        id: ami_id
        run: >
          ID=$(aws ec2 describe-images
          --filter "Name=tag:ci-run-id,Values=${{ github.run_id }}"
          "Name=name,Values=dotkom/images/hvm-ssd/ubuntu-focal-20.04-base*"
          --query "Images[0].[ImageId]"
          --output text) &&
          echo "::set-output name=id::$ID"

      - name: Remove AMI
        if: github.event_name != 'push'
        run: aws ec2 deregister-image --image-id ${{steps.ami_id.outputs.id}}

      - name: Tag AMI as production
        if: github.event_name == 'push'
        run: aws ec2 create-tags --resources ${{steps.ami_id.outputs.id}} --tags Key=production,Value=true

  build-rest:
    name: "Packer build rest"
    runs-on: ubuntu-latest
    needs: build-base
    strategy:
      matrix:
        image: ["consul-server", "nomad-client", "nomad-server", vault-server]
    env:
      AWS_DEFAULT_REGION: eu-north-1
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.1.2
        with:
          url: https://vault.online.ntnu.no:8200
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              /aws/creds/packer-builder access_key | AWS_ACCESS_KEY_ID ;
              /aws/creds/packer-builder secret_key | AWS_SECRET_ACCESS_KEY ;

      - name: Wait for IAM eventual consistency
        run: sleep 10

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION}}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build AWS AMI
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: -var=aws_ami_tags={ci-run-id="${{ github.run_id }}"} -var 'skip_create_image=false'
          target: images/${{ matrix.image }}

      - name: Find AMI ID
        id: ami_id
        run: >
          ID=$(aws ec2 describe-images
          --filter "Name=tag:ci-run-id,Values=${{ github.run_id }}"
          "Name=name,Values=dotkom/images/hvm-ssd/ubuntu-focal-20.04-${{ matrix.image }}*"
          --query "Images[0].[ImageId]"
          --output text) &&
          echo "::set-output name=id::$ID"

      - name: Remove AMI
        if: github.event_name != 'push'
        run: aws ec2 deregister-image --image-id ${{steps.ami_id.outputs.id}}

      - name: Tag AMI as production
        if: github.event_name == 'push'
        run: aws ec2 create-tags --resources ${{steps.ami_id.outputs.id}} --tags Key=production,Value=true
